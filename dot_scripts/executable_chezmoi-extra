#!/usr/bin/env -S uv run -s -q
# /// script
# requires-python = "~=3.11"
# dependencies = ["questionary", "typer", "sh"]
# ///
import questionary
import typer
import sh
import json
import os
import re
import shutil
import tomllib
from pathlib import Path
from typing import Dict, List, Optional

PROFILES: List = [" Desktop", " Laptop", " Server"]
STYLES: List = [" Round Wine", " Square Box"]

CHEZMOI_PATH: Path = Path.home() / ".local/share/chezmoi"
CHEZMOI_COLORS_PATH: Path = CHEZMOI_PATH / ".colors"
CHEZMOI_METADATA_PATH: Path = CHEZMOI_PATH / ".variables.json"

app = typer.Typer(no_args_is_help=True)


class ChezmoiMetadata:
    """Helper for handling custom Chezmoi metadata."""

    def __init__(self, profile: str, colors: str, style: str):
        self.profile = profile
        self.colors = colors
        self.style = style

    def ask_profile(self):
        profile = questionary.select("Choose a profile:", choices=PROFILES).ask()
        self.profile = profile[2:].lower()

    def ask_colors(self):
        dark_colors: Dict = self.available_colors(mode_filter="Dark")
        light_colors: Dict = self.available_colors(mode_filter="Light")
        available_colors: Dict = {}
        available_colors.update(dark_colors)
        available_colors[questionary.Separator()] = ""
        available_colors.update(light_colors)
        colors = questionary.select(
            "Choose a color scheme:", choices=list(available_colors.keys())
        ).ask()
        self.colors = Path(available_colors[colors]).name

    def ask_style(self):
        style = questionary.select("Choose a style:", choices=STYLES).ask()
        self.style = style[2:].lower().replace(" ", "-")

    def write(self):
        metadata = {
            "profile": self.profile,
            "colors": self.colors,
            "style": self.style,
        }
        file_path = CHEZMOI_METADATA_PATH
        # Save the metadata to file
        with open(file_path, "w") as f:
            json.dump(metadata, f)
        # Generate the chezmoi metadata
        chezmoidata_path = CHEZMOI_PATH / ".chezmoidata.toml"
        shutil.copy(CHEZMOI_COLORS_PATH / self.colors, chezmoidata_path)
        with open(chezmoidata_path, "a") as f:
            f.write("\n[metadata]\n")
            f.write(f'profile = "{self.profile}"\n\n')
            f.write("[metadata.theme]\n")
            f.write(f'style = "{self.style}"\n')

    @staticmethod
    def read():
        with open(CHEZMOI_METADATA_PATH, "r") as f:
            metadata = json.load(f)
        return ChezmoiMetadata(**metadata)

    @staticmethod
    def available_colors(mode_filter: Optional[str] = None) -> Dict[str, str]:
        """Available colors filtered by 'mode'.

        Returns:
            colors: Dict of pretty-printed color names (key) and their filename (value).
        """
        filenames: List[str] = sorted(os.listdir(CHEZMOI_COLORS_PATH))
        colors = {}
        for filename in filenames:
            with open(f"{CHEZMOI_COLORS_PATH}/{filename}", "rb") as f:
                _raw = tomllib.load(f)
            name = _raw["colors"]["metadata"]["name"]
            mode = _raw["colors"]["metadata"]["mode"]
            if mode_filter and mode != mode_filter:
                continue
            colors[name] = filename
        return colors


class ChezmoiColors:
    def __init__(self, colors_filename: str | Path):
        self._path = CHEZMOI_COLORS_PATH / colors_filename
        with open(self._path, "rb") as f:
            _raw = tomllib.load(f)
        self._metadata = _raw["colors"]["metadata"]
        self._colors_generic = _raw["colors"]["generic"]
        self._colors_terminal = _raw["colors"]["terminal"]
        self._apps = _raw["colors"]["apps"]

        # Calculate the bright colors for _colors_terminal
        if self._metadata["mode"].lower() == "dark":
            self._add_bright_color("black", saturation=0.15, light=0.15)
            self._add_bright_color("white", saturation=-0.15, light=-0.15)
        else:
            self._add_bright_color("black", saturation=-0.15, light=-0.15)
            self._add_bright_color("white", saturation=0.15, light=0.15)
        for color in ["red", "green", "yellow", "blue", "magenta", "cyan", "orange"]:
            self._add_bright_color(color, saturation=0.2, light=0.1)
        self._add_extra_colors(
            black=self._colors_terminal["black"], white=self._colors_terminal["white"]
        )

    def _add_bright_color(self, color_name: str, saturation: float, light: float):
        color = self._colors_terminal[color_name]
        self._colors_terminal[f"bright_{color_name}"] = ChezmoiColors._modify_color(
            color, saturation, light
        )

    def _add_extra_colors(self, black: str, white: str):
        pastel = sh.pastel.bake(_tty_out=False)  # type: ignore
        gradient = pastel.format.hex(_in=pastel.gradient(black, white, number=8))
        extra_colors = gradient.strip().split("\n")
        # The first and last colors in the gradient are black and white, so skip them
        self._colors_terminal["color_16"] = extra_colors[1]
        self._colors_terminal["color_17"] = extra_colors[2]
        self._colors_terminal["color_18"] = extra_colors[3]
        self._colors_terminal["color_19"] = extra_colors[4]
        self._colors_terminal["color_20"] = extra_colors[5]
        self._colors_terminal["color_21"] = extra_colors[6]

    @staticmethod
    def _modify_color(color: str, saturation: float = 0.2, light: float = 0.1):
        pastel = sh.pastel.bake(_tty_out=False)  # type: ignore
        hex_color = pastel.format(
            _in=pastel.lighten(light, _in=pastel.saturate(saturation, color))
        )
        return hex_color.strip()

    @property
    def name(self) -> str:
        return self._metadata["name"]

    @property
    def series(self) -> str:
        return self._metadata["series"]

    @property
    def mode(self) -> str:
        return self._metadata["mode"]

    def write(self):
        regex = re.compile(r"\[colors\.terminal\](\n.+)+", re.MULTILINE)
        toml_string = "[colors.terminal]\n"
        for key, value in self._colors_terminal.items():
            toml_string += f'{key} = "{value}"\n'
        toml_string = toml_string.rstrip()

        # Save the colors to file
        with open(self._path, "r") as f:
            new_toml = regex.sub(toml_string, f.read())
        with open(self._path, "w") as f:
            f.write(new_toml)


@app.command()
def generate(apply: bool = True):
    """Generate custom metadata for Chezmo."""
    metadata = ChezmoiMetadata("", "", "")
    metadata.ask_profile()
    metadata.ask_colors()
    metadata.ask_style()
    metadata.write()
    if apply:
        sh.chezmoi.apply(_fg=True)  # type: ignore


@app.command()
def theme(apply: bool = True):
    """Switch color scheme."""
    metadata = ChezmoiMetadata.read()
    metadata.ask_colors()
    metadata.write()
    if apply:
        sh.chezmoi.apply(_fg=True)  # type: ignore


@app.command()
def metadata():
    """Print the custom metadata used for Chezmoi."""
    print(sh.jq(".", CHEZMOI_METADATA_PATH).strip())  # type: ignore


@app.command()
def complete_colors():
    """Generate the 'extra colors' for the available themes.

    Add the 'bright' colors and 'color16-color21' to a theme by automatically
    generating them using the 'pastel' CLI tool.
    """
    for color_path in ChezmoiMetadata.available_colors().values():
        ChezmoiColors(CHEZMOI_COLORS_PATH / color_path).write()
        print(f"Updated colors for {color_path}")


if __name__ == "__main__":
    app()
